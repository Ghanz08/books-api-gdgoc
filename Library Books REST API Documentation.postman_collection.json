{
	"info": {
		"_postman_id": "e0f3e374-873a-4784-9b46-3508c5aa574a",
		"name": "Library Books REST API Documentation",
		"description": "# ðŸ“„ Overview\n\nThe Library Books REST API provides endpoints to manage books in a library. You can create, read, update, and delete books. Built with Node.js, Express, and MySQL.\n\nðŸ“¦ \\[GitHub Repository\\]([<code>https://github.com/Ghanz08/books-api-gdgoc</code>](https://github.com/Ghanz08/books-api-gdgoc))\n\n## ðŸ”– Base URL\n\n- The base URL for the API is: [<code>http://books-api-ghani.my.id</code>](http://books-api-ghani.my.id)\n    \n\n## Setup\n\n`bash`\n\n## Clone repository\n\ngit clone [<code>https://github.com/Ghanz08/books-api-gdgoc.git</code>](https://github.com/Ghanz08/books-api-gdgoc.git)\n\n## Install dependencies\n\n`npm install`\n\n## Configure database in app.js\n\n## Start server\n\n`npm start`\n\n---\n\n## Available Endpoints\n\n- `POST /api/books` - Create New Book\n    \n- `GET /api/books` - List All Books\n    \n- `GET /api/books/:id` - Get Book Detail\n    \n- `PUT /api/books/:id` - Update Book\n    \n- `DELETE /api/books/:id` - Delete Book\n    \n\n## Getting Started\n\nTo start using the Library Books API, you need to:\n\n1. Ensure you have a MySQL database set up with the required schema.\n    \n2. Run the server using Node.js.\n    \n3. Use the endpoints listed above to interact with the API.\n    \n\n## Authentication\n\nNo authentication is required for this API.\n\n## Rate and Usage Limits\n\nThere are no rate limits for this API.\n\n## Endpoints\n\n### Create New Book\n\n- **URL:** `http://books-api-ghani.my.id/api/books`\n    \n- **Method:** `POST`\n    \n- **Body Parameters:**\n    \n    - `title` (string) - The title of the book.\n        \n    - `author` (string) - The author of the book.\n        \n    - `published_at` (string) - The publication date of the book.\n        \n    - `genre` (string) - The genre of the book.\n        \n- **Response:**\n    \n    - `201 Created` - Book created successfully.\n        \n    - `500 Internal Server Error` - Failed to create book.\n        \n\n### List All Books\n\n- **URL:** `http://books-api-ghani.my.id/api/books`\n    \n- **Method:** `GET`\n    \n- **Response:**\n    \n    - `200 OK` - List of all books.\n        \n    - `500 Internal Server Error` - Failed to fetch books.\n        \n\n### Get Book Detail\n\n- **URL:** `http://books-api-ghani.my.id/api/books/:id`\n    \n- **Method:** `GET`\n    \n- **Response:**\n    \n    - `200 OK` - Book details.\n        \n    - `404 Not Found` - Book not found.\n        \n    - `500 Internal Server Error` - Failed to fetch book.\n        \n\n### Update Book\n\n- **URL:** `http://books-api-ghani.my.id/api/books/:id`\n    \n- **Method:** `PUT`\n    \n- **Body Parameters:**\n    \n    - `title` (string) - The title of the book.\n        \n    - `author` (string) - The author of the book.\n        \n    - `published_at` (string) - The publication date of the book.\n        \n    - `genre` (string) - The genre of the book.\n        \n- **Response:**\n    \n    - `200 OK` - Book updated successfully.\n        \n    - `404 Not Found` - Book not found.\n        \n    - `500 Internal Server Error` - Failed to update book.\n        \n\n### Delete Book\n\n- **URL:** `http://books-api-ghani.my.id/api/books/:id`\n    \n- **Method:** `DELETE`\n    \n- **Response:**\n    \n    - `200 OK` - Book deleted successfully.\n        \n    - `404 Not Found` - Book not found.\n        \n    - `500 Internal Server Error` - Failed to delete book.\n        \n\n## Database Schema\n\n`CREATE TABLE books (`\n\n`id INT PRIMARY KEY AUTO_INCREMENT,`\n\n`title VARCHAR(255) NOT NULL,`\n\n`author VARCHAR(255) NOT NULL,`\n\n`published_at DATE NOT NULL,`\n\n`genre VARCHAR(100));`\n\n## Technologies Used\n\n- Node.js\n    \n- Express\n    \n- MySQL\n    \n- CORS\n    \n- Body Parser\n    \n\nFor more details and code examples, visit the [<code>GitHub repository</code>](https://null).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39814157"
	},
	"item": [
		{
			"name": "Collections",
			"item": [
				{
					"name": "CREATE BOOK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: { type: \"string\" },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          title: { type: \"string\" },\r",
									"          author: { type: \"string\" },\r",
									"          published_at: { type: \"string\" },\r",
									"          updated_at: { type: \"string\" },\r",
									"          created_at: { type: \"string\" },\r",
									"          id: { type: \"number\" }\r",
									"        },\r",
									"        required: [\"title\", \"author\", \"published_at\", \"updated_at\", \"created_at\", \"id\"]\r",
									"      }\r",
									"    },\r",
									"    required: [\"message\", \"data\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Introduction to Programming\",\n  \"author\": \"John Doe\",\n  \"published_at\": \"2023-05-15\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/books",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n*   `info` â€” An **object** that contains the following properties:\n    *   `name` â€” A **string** value that contains the collection's name.\n    *   `schema` â€” A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n*   `item` â€” An **object** that contains the HTTP request and response information.\n    *   `request` â€” An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n**Note:**\n\n*   For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    *   `info` object â€” Use the `definitions.info` entry.\n    *   `item` object â€” Use the `definitions.items` entry.\n*   For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
					},
					"response": [
						{
							"name": "CREATE BOOK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Introduction to Programming\",\n  \"author\": \"John Doe\",\n  \"published_at\": \"2023-05-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/books",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"books"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"name\": \"Test Collection\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						}
					]
				},
				{
					"name": "READ BOOK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      data: {\r",
									"        type: \"array\",\r",
									"        items: {\r",
									"          type: \"object\",\r",
									"          properties: {\r",
									"            id: { type: \"number\" },\r",
									"            title: { type: \"string\" },\r",
									"            author: { type: \"string\" },\r",
									"            published_at: { type: \"string\" },\r",
									"            created_at: { type: \"string\" },\r",
									"            updated_at: { type: \"string\" }\r",
									"          },\r",
									"          required: [\"id\", \"title\", \"author\", \"published_at\", \"created_at\", \"updated_at\"]\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    required: [\"data\"]\r",
									"  };\r",
									"\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"//Set collection variabel BOOK_ID\r",
									"pm.collectionVariables.set(\"BOOK_ID\", response.data[0].id);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/books",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "access_key",
									"value": "{{accessKey}}",
									"description": "Optional. A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.",
									"disabled": true
								}
							]
						},
						"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
					},
					"response": [
						{
							"name": "READ BOOK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/books",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "DELETE BOOK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response schema validation\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    var schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            message: {\r",
									"                type: \"string\"\r",
									"            }\r",
									"        },\r",
									"        required: [\"message\"]\r",
									"    };\r",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/books/{{BOOK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"books",
								"{{BOOK_ID}}"
							]
						},
						"description": "Deletes a collection."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/books/{{BOOK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"books",
										"{{BOOK_ID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						}
					]
				},
				{
					"name": "UPDATE BOOK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: { type: \"string\" },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          id: { type: \"number\" },\r",
									"          title: { type: \"string\" },\r",
									"          author: { type: \"string\" },\r",
									"          published_at: { type: \"string\" },\r",
									"          created_at: { type: \"string\" },\r",
									"          updated_at: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"id\", \"title\", \"author\", \"published_at\", \"created_at\", \"updated_at\"]\r",
									"      }\r",
									"    },\r",
									"    required: [\"message\", \"data\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"{{collectionName}}\",\n            \"schema\": \"{{collectionSchemaUrl}}\"\n        },\n        \"item\": [\n            {\n                \"request\": {}\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/books/{{BOOK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"books",
								"{{BOOK_ID}}"
							]
						},
						"description": "Updates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n- `info` â€” An **object** that contains the following properties:\n    - `name` â€” A **string** value that contains the collection's name.\n    - `schema` â€” A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n- `item` â€” An **object** that contains the HTTP request and response information.\n    - `request` â€” An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n**Note:**\n\n- For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    - `info` object â€” Use the `definitions.info` entry.\n    - `item` object â€” Use the `definitions.items` entry.\n- For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).\n    \n\n### Important\n\nUse caution when using this endpoint. The system will replace the existing collection with the values passed in the request body."
					},
					"response": [
						{
							"name": "UPDATE BOOK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/books/{{BOOK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"books",
										"{{BOOK_ID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"name\": \"Test Collection\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						}
					]
				},
				{
					"name": "NOT FOUND BOOK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/books/{{BOOK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"books",
								"{{BOOK_ID}}"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID.",
									"disabled": true
								}
							]
						},
						"description": "Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/books/{{BOOK_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"books",
										"{{BOOK_ID}}"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        },\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-01-13T10:21:46.000Z\",\n            \"updatedAt\": \"2022-02-12T11:29:56.000Z\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"isPublic\": false,\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        {\n            \"id\": \"f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"name\": \"Postman Echo\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2021-04-11T09:18:26.000Z\",\n            \"updatedAt\": \"2022-05-01T15:29:32.000Z\",\n            \"uid\": \"12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"isPublic\": true\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/)."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://books-api-ghani.my.id"
		},
		{
			"key": "BOOK_ID",
			"value": "1",
			"type": "string"
		}
	]
}